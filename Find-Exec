#可以用-user 找出root擁有的所有文件，然後用-exec更改所有權

find . -type f -user root -exec chown chunyu {} \;

#注意必須有符號 ; 命令才會生效。上述命令中，{}是一個與-exec選項搭配使用的特殊字符串，對於每一個匹配的文件，{}會被替換成相應的文件名

#find執行 chown chunyu {} 它會被解析爲 chown chunyu test1.txt 和chown chunyu text2.txt

#另外一個例子就是，將給定目錄中的所有C程序文件拼接起來，寫入單個文件all_c_files.txt  我們可以用find找到 所有的C 文件，然後結合 -exec使用cat命令

find . -type f -name "*.c" -exec cat {} \; > all_c_files.txt

#-exec 之後可以接任何命令。{} 表示一個匹配  對於任何匹配的文件名，{}均會被該文件名替換

#我們使用> 操作符將來自find的數據重定向到all_c_files.txt文件 沒有使用>> （追加）的原因是因爲find命令的全部輸出就只有一個數據流（stdin） ,而只有當多個數據流被追加到單個文件時才有必要使用>>

#用如下命令將10天前的.txt文件夾複製到OLD目錄下

find . -type f -mtime +10 -name "*.txt" -exec cp {} OLD \;

#-exec 結合多個命令  我們無法在-exec參數中直接找到多個命令，它只能夠接受單個命令，不過我們可以把多個命令寫到一個shell腳本中，然後在-exec中使用這個腳本


-exec ./commands.sh {} \;


#讓find命令跳過特定的目錄，將特定的目錄和文件從搜索中排除的技巧被稱爲 修剪

find devel/source_path \ (-name ".git" -prune \) -o \(-type f -print \)

#\ (-name ".git" -prune \)  的作用是用於排除，它指明了 .git目錄應該被排除在外，而 \(-type f -print \) 指明了需要執行的動作  這些動作需要被放置在第二個語句塊中



